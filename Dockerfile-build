# Copy this file and Run from one level higher than the git pull directory
# To build: docker build -t opsh2oai/h2oai-nv -f Dockerfile-nvdocker .
# To run with docker run -it -p 12345:12345 opsh2oai/h2oai-nv

ARG layer
ARG version

FROM $layer:$version
#FROM ubuntu:latest

MAINTAINER H2o.ai <ops@h2o.ai>

# Env variables
ENV DEBIAN_FRONTEND noninteractive
ENV HOME=/root
ENV PYENV_ROOT=$HOME/.pyenv
ENV PATH=$PYENV_ROOT/bin:$PATH

RUN if $layer -ne "ubuntu"; then export CUDA_HOME=/usr/local/cuda && \
	export PATH=/usr/local/cuda/bin:$PATH && \
	export LD_LIBRARY_PATH_MORE=/home/$USER/lib/:$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64 && \
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LD_LIBRARY_PATH_MORE && \
	export CUDADIR=/usr/local/cuda/include/ && \
	export OMP_NUM_THREADS=32 && \
	export MKL_NUM_THREADS=32 && \
	export VECLIB_MAXIMUM_THREADS=32; fi

# Setup Repos
RUN \
  apt-get update -y && \
  apt-get -y install curl apt-utils \
  software-properties-common iputils-ping wget cpio net-tools build-essential \
  git zip dirmngr && \
  apt-get -y --no-install-recommends  install \
      python3-dateutil \
      python3-magic && \
  wget http://launchpadlibrarian.net/326935544/s3cmd_2.0.0-1_all.deb && \
  dpkg -i s3cmd_2.0.0-1_all.deb && \
  add-apt-repository -y ppa:deadsnakes/ppa && \
  python3-pip python3-dev python3-virtualenv python-virtualenv && \
  apt-get update -yqq && \
  curl -sL https://deb.nodesource.com/setup_7.x | bash - && \
  apt-get -y --no-install-recommends  install \
    python3.6 \
    python3.6-dev \
    python3-pip \
    python3-setuptools \
    python3-wheel && \
  update-alternatives --install /usr/bin/python python /usr/bin/python3.6 100 && \
  python -m pip install --upgrade pip && \
  apt-get clean && \
  rm -rf /var/cache/apt/* && \
  apt-get install -y libopenblas-dev && \
  apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev

# NCCL2 (License: https://docs.nvidia.com/deeplearning/sdk/nccl-sla/index.html)
RUN \
    export CUDA_HOME=/usr/local/cuda ; if [ -d "$CUDA_HOME" ]; then \
    export CUDA_LIB=$CUDA_HOME/lib64 && \
    export CUDA_VERSION=`ls $CUDA_LIB/libcudart.so.* | head -1 | rev | cut -d "." -f -2 | rev` && \
    export CUDA_MAJOR=`echo $CUDA_VERSION | cut -d "." -f 1` && \
    export CUDA_MINOR=`echo $CUDA_VERSION | cut -d "." -f 2| sed 's/@//g'` && \
    export CUDA_SHORT=`echo $CUDA_VERSION | egrep -o '[0-9]\.[0-9]'` && \
    wget https://developer.download.nvidia.com/compute/redist/nccl/v2.2/nccl_2.2.13-1%2Bcuda${CUDA_SHORT}_x86_64.txz && \
    tar xf "nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64.txz" && \
    cp nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64/include/nccl.h /usr/include && \
    cp nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64/lib/* /usr/lib && \
    rm -f nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64.txz && \
    rm -r nccl_2.2.13-1+cuda${CUDA_SHORT}_x86_64 ; \
    fi

RUN \
    mkdir -p .pylint.d && \
    rm -rf ~/.pyenv && \
    git clone https://github.com/pyenv/pyenv.git ~/.pyenv && \
    eval "$(/root/.pyenv/bin/pyenv init -)" && \
    /root/.pyenv/bin/pyenv install 3.6.1 && \
    /root/.pyenv/bin/pyenv global 3.6.1 && \
    pip install setuptools --no-cache-dir

COPY requirements_buildonly.txt requirements_buildonly.txt
COPY requirements_runtime.txt requirements_runtime.txt
RUN \
    eval "$(/root/.pyenv/bin/pyenv init -)" && \
    /root/.pyenv/bin/pyenv global 3.6.1 && \
    pip install setuptools && \
    pip install -r requirements_buildonly.txt && \
    pip install -r requirements_runtime.txt && \
    chmod 777 / && \
    chmod -R 777 /root  && \
    chmod ugo+s /root/
